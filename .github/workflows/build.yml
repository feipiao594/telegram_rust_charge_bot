name: PR Workflow

on: [push]
  # - push
  # - pull_request

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target:
          - os: linux
            arch: "amd64"
            rust-target: "x86_64-unknown-linux-gnu"
            runs-on: ubuntu-latest
          - os: linux
            arch: "arm64"
            rust-target: "aarch64-unknown-linux-gnu"
            runs-on: ubuntu-latest
          - os: darwin
            arch: "amd64"
            rust-target: "x86_64-apple-darwin"
            runs-on: macos-latest
          - os: darwin
            arch: "arm64"
            rust-target: "aarch64-apple-darwin"
            runs-on: macos-latest
          - os: windows
            arch: "amd64"
            rust-target: "x86_64-pc-windows-msvc"
            runs-on: windows-latest
          - os: windows
            arch: "arm64"
            rust-target: "aarch64-pc-windows-msvc"
            runs-on: windows-latest
    runs-on: ${{ matrix.target.runs-on }}
    name: Build and save artifact
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Install toolchain
        run: rustup toolchain install stable --profile minimal --target ${{ matrix.target.rust-target }} --no-self-update

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross
        if: ${{ matrix.target.os != 'windows' && matrix.target.os != 'darwin' }}

      # - name: Install necessary file for Windows
      #   run: cpan Try::Tiny Config::Simple JSON & cpan install XML::Simple 
      #   if: ${{ matrix.target.os == 'windows' }}

      - uses: Swatinem/rust-cache@v2

      - name: Build using cross
        run: cross build --release --target ${{ matrix.target.rust-target }}
        if: ${{ matrix.target.os != 'windows' && matrix.target.os != 'darwin' }}

      - name: Build using cargo
        run: cargo build --release --target ${{ matrix.target.rust-target }}
        if: matrix.target.os == 'windows' || matrix.target.os == 'darwin'

      - name: Set .exe extension for Windows
        id: set_extension
        run: echo "extension=.exe" >> $GITHUB_OUTPUT
        if: ${{ matrix.target.os == 'windows' }}

      - name: Set executable filename
        id: set_filename
        run: echo "filename=tg_charge_notion_bot-${{ matrix.target.os }}-${{ matrix.target.arch }}${{ steps.set_extension.outputs.extension }}" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: ${{ steps.set_filename.outputs.filename }}
          path: target/${{ matrix.target.rust-target }}/release/tg_charge_notion_bot${{ steps.set_extension.outputs.extension }}
          compression-level: 0
